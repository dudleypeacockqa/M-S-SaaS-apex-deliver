============================= test session starts =============================
platform win32 -- Python 3.13.5, pytest-8.4.2, pluggy-1.6.0 -- C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\venv\Scripts\python.exe
cachedir: .pytest_cache
rootdir: C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver
configfile: pytest.ini
plugins: anyio-4.11.0, asyncio-1.2.0
asyncio: mode=Mode.STRICT, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 31 items / 30 deselected / 1 selected

backend/tests/test_document_endpoints.py::test_access_logs_include_user_name FAILED [100%]

================================== FAILURES ===================================
_____________________ test_access_logs_include_user_name ______________________

client = <starlette.testclient.TestClient object at 0x00000285839717F0>
auth_context = ({'Authorization': 'Bearer mock_token_b82d68c5-6c27-4010-b659-c0b9c8ef94c4'}, <function auth_context.<locals>.cleanup ...b659-c0b9c8ef94c4, clerk_user_id='clerk_71147fa1-52a0-4bea-ac17-03af775507bc'), '6c737064-5a87-4974-8c75-cc6a1ae5e8e8')
seeded_deal = Deal(id=e172db8e-0d66-4332-aaaa-b9b1a8740f71, name='Secure Deal', stage='sourcing')

    def test_access_logs_include_user_name(client, auth_context, seeded_deal):
        """Ensure audit log endpoint returns user-friendly actor details."""
        headers, cleanup, user, _ = auth_context
        try:
>           upload_resp = client.post(
                f"/api/deals/{seeded_deal.id}/documents",
                headers=headers,
                files={"file": ("audit.pdf", io.BytesIO(b"audit"), "application/pdf")},
            )

backend\tests\test_document_endpoints.py:1044: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
backend\venv\Lib\site-packages\starlette\testclient.py:552: in post
    return super().post(
backend\venv\Lib\site-packages\httpx\_client.py:1144: in post
    return self.request(
backend\venv\Lib\site-packages\starlette\testclient.py:451: in request
    return super().request(
backend\venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend\venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
backend\venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
backend\venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend\venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend\venv\Lib\site-packages\starlette\testclient.py:354: in handle_request
    raise exc
backend\venv\Lib\site-packages\starlette\testclient.py:351: in handle_request
    portal.call(self.app, scope, receive, send)
backend\venv\Lib\site-packages\anyio\from_thread.py:321: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
..\..\Python313\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
..\..\Python313\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
backend\venv\Lib\site-packages\anyio\from_thread.py:252: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
backend\venv\Lib\site-packages\fastapi\applications.py:1134: in __call__
    await super().__call__(scope, receive, send)
backend\venv\Lib\site-packages\starlette\applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
backend\venv\Lib\site-packages\starlette\middleware\errors.py:186: in __call__
    raise exc
backend\venv\Lib\site-packages\starlette\middleware\errors.py:164: in __call__
    await self.app(scope, receive, _send)
backend\venv\Lib\site-packages\starlette\middleware\cors.py:85: in __call__
    await self.app(scope, receive, send)
backend\venv\Lib\site-packages\starlette\middleware\exceptions.py:63: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
backend\venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
backend\venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
backend\venv\Lib\site-packages\fastapi\middleware\asyncexitstack.py:18: in __call__
    await self.app(scope, receive, send)
backend\venv\Lib\site-packages\starlette\routing.py:716: in __call__
    await self.middleware_stack(scope, receive, send)
backend\venv\Lib\site-packages\starlette\routing.py:736: in app
    await route.handle(scope, receive, send)
backend\venv\Lib\site-packages\starlette\routing.py:290: in handle
    await self.app(scope, receive, send)
backend\venv\Lib\site-packages\fastapi\routing.py:124: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
backend\venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    raise exc
backend\venv\Lib\site-packages\starlette\_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
backend\venv\Lib\site-packages\fastapi\routing.py:110: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
backend\venv\Lib\site-packages\fastapi\routing.py:390: in app
    raw_response = await run_endpoint_function(
backend\venv\Lib\site-packages\fastapi\routing.py:289: in run_endpoint_function
    return await dependant.call(**values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
backend\app\api\routes\documents.py:197: in upload_document
    File type and size validation:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

db = <sqlalchemy.orm.session.Session object at 0x0000028583A723C0>

    async def upload_document(
        db: Session,
        *,
        file: UploadFile,
        deal_id: str,
        current_user: User,
        folder_id: Optional[str] = None,
    ) -> DocumentUploadResponse:
        deal = _ensure_deal_access(db, deal_id, current_user)
        folder = _ensure_folder_access(db, folder_id, deal)
    
        if folder:
            permission_level = _resolve_folder_permission(
                db,
                folder=folder,
                user=current_user,
                deal=deal,
            )
            if _PERMISSION_RANK[_normalize_level(permission_level)] < _PERMISSION_RANK[PermissionLevel.EDITOR]:
                raise HTTPException(
                    status.HTTP_403_FORBIDDEN,
                    detail="Insufficient permissions to upload to this folder",
                )
        else:
            if str(deal.owner_id) != str(current_user.id):
                raise HTTPException(
                    status.HTTP_403_FORBIDDEN,
                    detail="Only deal owners can upload to the root data room",
                )
    
        if file.content_type not in ALLOWED_FILE_TYPES:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Unsupported file type",
            )
    
        file.file.seek(0, os.SEEK_END)
        file_size = file.file.tell()
        file.file.seek(0)
    
        if file_size > MAX_FILE_SIZE:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="File size exceeds 50MB limit",
            )
    
        storage = get_storage_service()
        storage_key = storage.generate_file_key(
            current_user.organization_id,
            deal_id,
            file.filename or "document",
            current_user.id,
        )
    
        await storage.save_file(storage_key, file.file, current_user.organization_id)
    
        # Check for existing document with same name in same location (versioning)
        filename = file.filename or "document"
        existing_docs_query = db.query(Document).filter(
            Document.name == filename,
            Document.deal_id == str(deal.id),
            Document.archived_at.is_(None),
        )
        if folder_id:
            existing_docs_query = existing_docs_query.filter(Document.folder_id == folder_id)
        else:
            existing_docs_query = existing_docs_query.filter(Document.folder_id.is_(None))
    
        # Get all versions ordered by version number descending
        existing_docs = existing_docs_query.order_by(Document.version.desc()).all()
    
        version_number = 1
        parent_doc_id = None
    
        if existing_docs:
            # Latest version is first (highest version number)
            latest_doc = existing_docs[0]
            version_number = latest_doc.version + 1
    
            # Find the root parent (v1) or use the latest doc's parent if it exists
            if latest_doc.parent_document_id:
                parent_doc_id = latest_doc.parent_document_id
            else:
                # Latest doc is the root (v1), so it becomes the parent
                parent_doc_id = latest_doc.id
    
        document = Document(
            id=str(uuid4()),
            name=filename,
            file_key=storage_key,
            file_size=file_size,
            file_type=file.content_type or "application/octet-stream",
            deal_id=str(deal.id),
            folder_id=folder_id,
            organization_id=current_user.organization_id,
            uploaded_by=current_user.id,
            version=version_number,
            parent_document_id=parent_doc_id,
        )
        db.add(document)
        db.flush()
    
>       await _trim_document_versions(
              ^^^^^^^^^^^^^^^^^^^^^^^
            db,
            base_document=document,
            storage=storage,
            max_versions=20,
        )
E       NameError: name '_trim_document_versions' is not defined

backend\app\services\document_service.py:388: NameError
============================== warnings summary ===============================
backend\app\schemas\valuation.py:57
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\valuation.py:57: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ValuationResponse(BaseModel):

backend\app\schemas\valuation.py:129
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\valuation.py:129: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ScenarioResponse(BaseModel):

backend\app\schemas\valuation.py:200
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\valuation.py:200: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class ComparableCompanyResponse(BaseModel):

backend\app\schemas\valuation.py:276
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\valuation.py:276: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class PrecedentTransactionResponse(BaseModel):

backend\venv\Lib\site-packages\pydantic\_internal\_generate_schema.py:319
backend\venv\Lib\site-packages\pydantic\_internal\_generate_schema.py:319
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\venv\Lib\site-packages\pydantic\_internal\_generate_schema.py:319: PydanticDeprecatedSince20: `json_encoders` is deprecated. See https://docs.pydantic.dev/2.12/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    warnings.warn(

backend\app\schemas\deal.py:43
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\deal.py:43: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class DealResponse(DealBase):

backend\app\schemas\financial.py:11
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\financial.py:11: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FinancialRatiosResponse(BaseModel):

backend\app\schemas\financial.py:62
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\financial.py:62: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FinancialDataInput(BaseModel):

backend\app\schemas\financial.py:117
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\financial.py:117: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FinancialConnectionResponse(BaseModel):

backend\app\schemas\financial.py:134
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\financial.py:134: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class FinancialNarrativeResponse(BaseModel):

backend\app\schemas\task.py:32
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\task.py:32: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class TaskResponse(BaseModel):

backend\app\schemas\task.py:70
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\task.py:70: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class TaskTemplateResponse(BaseModel):

backend\app\schemas\task.py:91
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\task.py:91: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class TaskAutomationRuleResponse(BaseModel):

backend\app\schemas\task.py:107
  C:\Projects\ma-saas-platform\M-S-SaaS-apex-deliver\backend\app\schemas\task.py:107: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.12/migration/
    class TaskAutomationLogResponse(BaseModel):

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED backend/tests/test_document_endpoints.py::test_access_logs_include_user_name - NameError: name '_trim_document_versions' is not defined
================ 1 failed, 30 deselected, 15 warnings in 1.42s ================
